post:
  tags:
    - Messaging
  summary: Create a simple message
  description: >
    YellowAnt allows you to send simple messages to the user in case of new
    updates or events. This message does not contain any data and cannot be used
    in event workflows. There is no need to declare anything in your developer
    portal application
  x-code-samples:
    - lang: Python
      source: |
        import json
          from yellowant.messageformat import MessageClass, MessageAttachmentsClass, MessageButtonsClass
          from yellowant import YellowAnt
          #Fetching user details and toke from DB
          user_obj = FictionalUserDB.objects.get(user_id=435)
          user_token = user_obj.yellowant_access_token
          #Initializing the YellowAnt User integration object with token acquired during authentication (OAuth2)
          user_integration_object = YellowAnt(access_token = user_token)
          #Creating a message
          message = MessageClass()
          message.message_text = "There is new pull request in repo argus/bolo from Perry Johnson"
          #adding an attachment for details
          attachment = MessageAttachmentsClass
          attachment.title = "Pull Request Details"
          #adding created at field
          field_created = AttachmentFieldsClass()
          field_created.title = "Created"
          field_created.value = "2 hours ago"
          attachment.attach_field(field_created)
          #adding status at field
          field_status = AttachmentFieldsClass()
          field_status.title = "Status"
          field_status.value = "Pending"
          attachment.attach_field(field_status)
          message.attach(attachment)
          #Sending message to YellowAnt user integration
          send_message = yellowant_user_integration_object.add_message(requester_application = user_integration_object.user_integration_id, **message.get_dict())
    - lang: Javascript
      source: >
        const sdk = require("yellowant-sdk");

        const Message = sdk.Message;

        const MessageAttachment = sdk.MessageAttachment;

        const MessageAttachmentField = sdk.MessageAttachmentField;


        const models = require("../db/models");

        let {
          Todo,
          YellowAntIntegration
        } = models;


        /**
         * createMessage
         *
         * Handles user commands
         *
         * @arg {Number} yellowantIntegrationId ID of the integration from which the command is invoked
         * @arg {String} commandName command name
         * @arg {Object} args any arguments supplementing the command
         */
        async function createMessage(yellowantIntegrationId, commandName, args)
        {
          // check whether yellowant integration exists
          const yellowantIntegration = await YellowAntIntegration.findOne({ where: { yellowantIntegrationId } });
          if (yellowantIntegration == null) {
            return new Message("Integration does not exist");
          }

          // check whether the command name is supported
          if (commandsByInvokeName[commandName] == null) {
            return new Message("Command does not exist, or is disabled.");
          }

          return await commandsByInvokeName[commandName](args, yellowantIntegration);
        }


        const commandsByInvokeName = {
          "createitem": createItem,
          "getlist": getList,
          "getitem": getItem,
          "updateitem": updateItem,
          "deleteitem": deleteItem,
        }


        async function createItem(args, yellowantIntegration) {
          let message = new Message();

          let todo = await Todo.create({
            YellowAntIntegrationId: yellowantIntegration.UserId,
            title: args.title,
            description: args.description,
          });

          message.text = "Created todo item:";

          message.addAttachment(buildTodoAttachment(todo));

          return message;
        }


        async function getList(args, yellowantIntegration) {
          let message = new Message();

          let todoList = await Todo.findAll({ where: { YellowAntIntegrationId: yellowantIntegration.id } });

          message.text = "Here are your todo items:";
          for (let todo of todoList) {
            message.addAttachment(buildTodoAttachment(todo));
          }

          return message;
        }


        async function getItem(args, yellowantIntegration) {
          let message = new Message();

          let todo = await Todo.findOne({ where: { id: args.id, YellowAntIntegrationId: yellowantIntegration.id } });

          if (todo == null) {
            message.text = "Could not find the todo item."
          } else {
            message.text = "Here is your todo item:";
            message.addAttachment(buildTodoAttachment(todo));
          }

          return message;
        }


        async function updateItem(args, yellowantIntegration) {
          let message = new Message();

          let todo = await Todo.findOne({ where: { id: args.id, YellowAntIntegrationId: yellowantIntegration.id } });

          if (todo == null) {
            message.text = "Could not find the todo item to update."
          } else {
            let title = args.title || todo.title;
            let description = args.description || todo.description;

            await todo.update({ title, description });

            message.text = "Here is your updated todo item:";
            message.addAttachment(buildTodoAttachment(todo));
          }

          return message;
        }


        async function deleteItem(args, yellowantIntegration) {
          let message = new Message();

          let todo = await Todo.findOne({ where: { id: args.id, YellowAntIntegrationId: yellowantIntegration.id } });

          if (todo == null) {
            message.text = "Could not find the todo item to delete."
          } else {
            await todo.destroy({ force: true });

            let todoList = await Todo.findAll({ where: { YellowAntIntegrationId: yellowantIntegration.id } });

            message.text = "Deleted item. Here are your remaining todo items:";
            for (let todo of todoList) {
              message.addAttachment(buildTodoAttachment(todo));
            }
          }

          return message;
        }



        function buildTodoAttachment(todo) {
          let attachment = new MessageAttachment({
            title: todo.title,
            text: todo.description
          });

          let field = new MessageAttachmentField({
            title: "ID",
            value: todo.id
          });

          attachment.addField(field);

          return attachment;
        }


        module.exports = createMessage;
  parameters:
    - name: simple message body
      in: body
      schema:
        $ref: '#/definitions/SimpleMessageBody'
  responses:
    '201':
      description: Simple Message created
      schema:
        $ref: '#/definitions/SimpleMessage'
    '401':
      $ref: '#/responses/AccessForbidden'
    '404':
      $ref: '#/responses/NotFound'
    '422':
      description: Invalid data was sent
      schema:
        $ref: '#/definitions/InvalidError'
